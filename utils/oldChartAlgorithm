// // const workoutsForTheWeek = workoutHistory.filter((el: any) => {
// //   const currWeekOfWorkouts = moment(el.date.toDate()).format("W");
// //   const currDay = moment(el.date.toDate()).format("D");
// //   console.log("current day of workout", currDay, day);
// //   if (currDay === dayOfWeek) {
// //     return el;
// //   }
// // });
// // console.log(workoutsForTheWeek);
// // console.log(workoutsForTheWeek, "change");
// // // if (arr.reduce === 0) potential solution
// // for (let i = 0; i < workoutsForTheWeek.length; i++) {
// //   if (i === currentIndexToChange) {
// //     chartArray[i] = workoutsForTheWeek.length;
// //   }
// // }
// // const chartDataRef = firebase
// //   .firestore()
// //   .collection("WorkoutChartData")
// //   .doc(userId.id);
// // const chartRef = await chartDataRef.get();
// // setChartData(chartRef.data().chartFeed);
// // //object schema for database (workout chart program)
// // const timeStamp = firebase.firestore.FieldValue.serverTimestamp();

// // const chartObject = {
// //   id: auth.currentUser.uid,
// //   chartFeed: chartArray,
// //   created: timeStamp,
// // };
// // const chartHistoryObject = {
// //   id: auth.currentUser.uid,
// //   chartArray: chartArray,
// //   created: timeStamp,
// // };
// // if (workoutsForTheWeek.length === 0) {
// //   chartHistoryRef.doc(userId.id).set(chartHistoryObject);
// // }

// // // query workouts and filter them by the current week

// const objectToUpdateChartWith = {
//   chartFeed: chartArray,
// };
// //now we update that data everytime we render or add a new workout
// const docRef = doc(db, "WorkoutChartData", userId.id);
// if (chartArray && chartArray.reduce((a, b) => a + b, 0) !== 0) {
//   updateDoc(docRef, objectToUpdateChartWith);
// }
// // if (workoutHistory.length === 0) {
// //   workoutChartData.doc(userId.id).set(chartObject);
// // }
